generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model platform_setting {
  id                   Int       @id @default(autoincrement())
  default_image        String?   @db.VarChar(200)
  access_key           String?   @db.VarChar(32)
  access_end_date      DateTime? @db.Date
  guest_mode           Boolean?
  guest_experiment_ids Json?
  display_num          Int?
  min_words            Int?      @default(5)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model engine {
  id                 Int     @id @default(autoincrement())
  engine_name        String  @db.VarChar(50)
  engine_description String? @db.VarChar(1000)
  engine_image       String  @db.VarChar(200)
  state              Int     @default(1) @db.UnsignedTinyInt
  gpt_prompt         String? @db.Text
  gpt_settings       Json?
  template           Json?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiment {
  id              Int       @id @default(autoincrement())
  creator         Int?
  experiment_name String?   @db.VarChar(100)
  create_time     DateTime? @default(now()) @db.DateTime(0)
  available       Int?      @default(1) @db.UnsignedTinyInt
  description     String?   @db.Text
  nano_id         String?   @unique(map: "psy_experiment_nano_id_uindex") @db.VarChar(16)
  engine_id       Int?
  intro           String?   @db.Text
  engine_ids      Json?
  lock            Int?      @default(0) @db.TinyInt

  @@index([engine_id], map: "idx_engine_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model trail {
  id                 Int       @id @default(autoincrement())
  user_experiment_id String?   @db.VarChar(16)
  user_id            Int?
  prompt             String?   @db.VarChar(1000)
  state              String?   @db.VarChar(15)
  create_time        DateTime? @default(now()) @db.DateTime(0)
  generate_prompt    String?   @db.VarChar(2000)
  image_url          String?   @db.VarChar(200)
  update_time        DateTime? @db.DateTime(0)
  nano_id            String?   @unique(map: "psy_trail_nano_id_uindex") @db.VarChar(16)
  part               Int?
  experiment_id      Int?
  request_id         String?   @db.VarChar(36)

  @@index([user_experiment_id], map: "idx_exp_nano_id")
  @@index([state], map: "idx_state")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id              Int       @id @default(autoincrement())
  username        String?   @db.VarChar(50)
  password        String?   @db.VarChar(50)
  email           String?   @db.VarChar(50)
  tel             String?   @db.VarChar(15)
  avatar          String?   @db.VarChar(100)
  user_role       String?   @db.VarChar(15)
  create_time     DateTime  @default(now()) @db.DateTime(0)
  salt            String?   @db.VarChar(32)
  user_group_id   Int?
  qualtrics       String?   @db.VarChar(50)
  nano_id         String?   @unique(map: "psy_user_nano_id_uindex") @db.VarChar(16)
  manager_id      Int?
  last_login_time DateTime? @db.DateTime(0)
  state           Int?      @default(1) @db.TinyInt
  deleted         Int?      @default(0)
  gender          Int?      @db.TinyInt
  ages            Int?
  wechat_id       String?   @db.VarChar(50)
  invite_code     String?   @db.VarChar(21)

  @@index([email], map: "idx_email")
  @@index([username], map: "idx_username")
  @@index([manager_id], map: "idx_manager_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_experiments {
  id               Int       @id @unique(map: "user_experiments_id_uindex") @default(autoincrement())
  user_id          Int?
  nano_id          String?   @db.VarChar(16)
  experiment_id    String?   @db.VarChar(16)
  type             String?   @default("TRAIL") @db.VarChar(30)
  engine_id        Int?
  project_group_id Int?
  start_time       DateTime? @default(now()) @db.DateTime(0)
  finish_time      DateTime? @db.DateTime(0)
  state            String?   @default("IN_EXPERIMENT") @db.VarChar(16)
  part             Int?      @default(1)
  is_deleted       Int?      @default(0) @db.TinyInt

  @@unique([nano_id, part], map: "user_experiments_nano_id_part_uindex")
  @@index([user_id], map: "idx_user_id")
  @@index([project_group_id], map: "idx_project_group_id")
  @@index([experiment_id], map: "idx_experiment_id")
  @@index([state], map: "idx_state")
  @@index([is_deleted], map: "idx_deleted")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_group {
  id                       Int     @id @default(autoincrement())
  user_id                  Int?
  project_id               Int?
  project_group_id         Int?
  project_experiment_times Int?    @default(0)
  state                    Int?    @default(1) @db.UnsignedTinyInt
  group_name               String? @db.VarChar(50)
  experiment_id            Int?

  @@unique([user_id, project_id], map: "idx_user_project")
  @@unique([user_id, project_group_id], map: "idx_user_project_id")
  @@index([project_group_id], map: "idx_project_group_id")
  @@index([project_id], map: "idx_project_id")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model experiment_steps {
  id            Int     @id @default(autoincrement())
  experiment_id Int?
  step_name     String? @db.VarChar(50)
  order         Int?
  type          Int?
  title         String? @db.VarChar(50)
  content       Json?
  random_id     String? @db.VarChar(32)
  nano_id       String? @unique(map: "idx_nano_id") @db.VarChar(32)

  @@unique([experiment_id, order], map: "idx_experiment_order_id")
  @@index([experiment_id], map: "idx_experiment_id")
}

model project_group {
  id          Int     @id @default(autoincrement())
  project_id  Int?
  group_name  String? @db.VarChar(30)
  description String? @db.Text
  state       String? @db.VarChar(20)
  gap         Int?    @default(7)

  @@index([project_id], map: "idx_project_id")
}

model projects {
  id                  Int       @id @default(autoincrement())
  project_name        String?   @db.VarChar(50)
  project_description String?   @db.VarChar(500)
  state               String?   @db.VarChar(50)
  invite_code         String?   @unique(map: "idx_invite_code") @db.VarChar(32)
  start_time          DateTime? @db.Date
  end_time            DateTime? @db.Date
  private             Int?      @default(1) @db.TinyInt
}

model project_group_experiments {
  id               Int @id @default(autoincrement())
  project_group_id Int
  experiment_id    Int
  experiment_index Int @db.UnsignedTinyInt

  @@unique([project_group_id, experiment_index], map: "idx_group_index")
  @@index([experiment_id], map: "idx_experiment_ide")
  @@index([project_group_id], map: "idx_project_group_id")
}

model user_avatar {
  id          Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  username    String
  avatar      Bytes
  avatar_type String
  version     Int
}

model resource_image {
  id          Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  file_data   Bytes
  file_type   String
  hash        String    @unique
  create_time DateTime? @default(now()) @db.DateTime(0)
  refkey      Json?
}

model trail_logger {
  id            Int       @id @default(autoincrement())
  input         String?   @db.Text
  images        Json?
  timestamp     DateTime? @db.DateTime(0)
  experiment_id String?   @db.VarChar(32)
  part          Int?

  @@index([experiment_id], map: "idx_experiment_id")
}

model user_login_log {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  login_time DateTime? @db.DateTime(0)
}
